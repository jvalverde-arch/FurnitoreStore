@page "/orderDetails"

@inject IClientService ClientService
@inject IOrderService OrderService
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@attribute [Authorize]

@if (order != null && clients!=null)
{
    <EditForm Model="@order" OnValidSubmit="SaveOrder">
        <div class="card">
            <h5 class="card-header">Order Details</h5>
            <div class="card-body">
                <div class="container">
                    <div class="row">
                        <div class="col-md-4 mb-3">
                        </div>
                        <div class="col-md-4 mb-3">
                            <input type="submit" class="btn btn-success" value="Save" @onclick="SaveOrder" />
                            <input type="button" class="btn btn-secondary" value="Cancel" @onclick="Cancel" />

                        </div>
                        <div class="col-md-4 mb-3">
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="">Number</label>
                            <InputNumber class="form-control" @bind-Value="@order.OrderNumber" />
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="">Order Date</label>
                            <InputDate class="form-control" @bind-Value="@order.OrderDate" />

                        </div>

                    </div>
                    <div class="row">
                        <div class="col-md-12 mb-3">
                            <label for="">Client</label>
                            <InputSelect class="form-control" @bind-Value="@order.ClientId">
                                @foreach (var client in clients)
                                {
                                    <option value="@client.Id">@(client.FirstName + ", " + client.LastName)</option>
                                }
                            </InputSelect>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="">Delivery Date</label>
                            <InputDate class="form-control" @bind-Value="@order.DeliveryDate" />

                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="">Total</label>
                            <InputNumber class="form-control" @bind-Value="@order.Total" />
                        </div>


                    </div>
                    <div class="row">
                        <div class="col-md-4 mb-3">
                        </div>
                        <div class="col-md-4 mb-3">
                              <input type="button" class="btn btn-secondary" value="Add Product" @onclick="AddProduct" />

                        </div>
                        <div class="col-md-4 mb-3">
                        </div>
                    </div>

                </div>
            </div>
        </div>






    </EditForm>
}
else
{
    <p><em>Loading....</em></p>
}
@code {
    public Order order;


    public IEnumerable<Client> clients;
    public string Message { get; set; }


    protected override async Task OnInitializedAsync()
    {
        try
        {
            //Order = new Order() ;
            order = new Order()
                {

                    DeliveryDate = DateTime.Now,
                    OrderDate = DateTime.Now.AddDays(7)
                };


            clients = await ClientService.GetAll();
        }
        catch (Exception e)
        {

            Message = "Ha ocurrido un error..." + e.Message;
        }
    }





    protected async Task SaveOrder()
    {
        await OrderService.SaveOrder(order);
        NavigateToHome();
    }
    private void NavigateToHome()
    {
        NavigationManager.NavigateTo("/");
    }

    protected void Cancel()
    {
        NavigateToHome();
    }

    protected async Task AddProduct()
    {
        ArgumentNullException.ThrowIfNull(DialogService);


        var dialog = DialogService.Show<ProductDetails>("Product Details");
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            var product = (Product)result.Data;
            if (order.Products == null)
                order.Products = new List<Product>();
            order.Products.Add(product);

        }

    }
}
