@page "/orderDetails"
@page "/orderDetails/{id:int}"
@inject IProductCategoryService ProductCategoryService
@inject IProductService ProductService
@inject IClientService ClientService
@inject IOrderService OrderService
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@attribute [Authorize]

@if (order != null && clients!=null)
{
    <EditForm Model="@order" OnValidSubmit="SaveOrder" >
        <DataAnnotationsValidator/>
        
        <div class="card">
            <h5 class="card-header">Order Details</h5>
            <div class="card-body">
                <div class="container">
                    <div class="row">
                        <div class="col-md-4 mb-3">
                        </div>
                        <div class="col-md-4 mb-3">
                            <input type="submit" class="btn btn-success" value="Save" @onclick="SaveOrder"  />
                            <input type="button" class="btn btn-secondary" value="Cancel" @onclick="Cancel" />
                           
                            <ValidationSummary Model="@order" ></ValidationSummary>
                        </div>
                        <div class="col-md-4 mb-3">
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="">Number</label>
                            <InputNumber class="form-control" @bind-Value="@order.OrderNumber" />
                            <ValidationMessage For="@(() => order.OrderNumber)" />
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="">Order Date</label>
                            <InputDate class="form-control" @bind-Value="@order.OrderDate" />

                        </div>

                    </div>
                    <div class="row">
                        <div class="col-md-12 mb-3">
                            <label for="">Client</label>
                            <InputSelect class="form-control" @bind-Value="@order.ClientId">
                                @foreach (var client in clients)
                                {
                                    <option value="@client.Id">@(client.FirstName + ", " + client.LastName)</option>
                                }
                            </InputSelect>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="">Delivery Date</label>
                            <InputDate class="form-control" @bind-Value="@order.DeliveryDate" />

                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="">Total</label>
                            @*<InputNumber class="form-control"  @bind-Value="@order.Total" />*@
                            <input  type="text" class="form-control" readonly="readonly" value="@order.Total.ToString("C")"/>
                        </div>


                    </div>
                    <div class="row">
                        <div class="col-md-4 mb-3">
                        </div>
                        <div class="col-md-4 mb-3">
                              <input type="button" class="btn btn-secondary" value="Add Product" @onclick="AddProduct" />

                        </div>
                        <div class="col-md-4 mb-3">
                        </div>
                    </div>

                </div>
            </div>
        </div>

        @if(order.Products!=null && order.Products.Any() )
        {
            <MudTable Items="@order.Products" Hover="true" Breakpoint="Breakpoint.Sm">
                <ToolBarContent>
                    <MudText Typo="Typo.h6" >Products</MudText>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh>Name</MudTh>
                    <MudTh>Price</MudTh>
                    <MudTh>Quantiy</MudTh>
                    <MudTh></MudTh>
                </HeaderContent>
                <RowTemplate Context="ProductContext">
                    <MudTd DataLabel="Name">@ProductContext.Name</MudTd>
                     <MudTd DataLabel="price">@ProductContext.Price</MudTd>
                      <MudTd DataLabel="Quantity">@ProductContext.Quantity</MudTd>
                    @*<MudTd DataLabel=""></MudTd>*@
                    <MudTd DataLabel="">
                        <MudFab OnClick="@(()=>RemoveProduct(ProductContext.Id))"
                        Color="Color.Secondary"
                        Icon="@Icons.Material.Filled.Delete"
                        >
                            
                        </MudFab>
                    </MudTd>
                </RowTemplate>
            </MudTable>
        }





    </EditForm>
}
else
{
    <p><em>Loading....</em></p>
}
@code {
    public Order order;


    public IEnumerable<Client> clients;
    public string Message { get; set; }

    [Parameter]
    public int id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {

            if (id > 0)
            {
                order = await OrderService.GetDetails(id);
            }
            else
            {
                order = new Order()
                    {
                        OrderNumber = await OrderService.GetNextNumber(),
                        ProductCategoryId = 1,
                        OrderDate = DateTime.Today,
                        DeliveryDate = DateTime.Today.AddDays(7)
                    };
            }

            clients = await ClientService.GetAll();
        }
        catch (Exception e)
        {
            Message = "There was an error..." + e.Message;
        }
    }





    protected async Task SaveOrder()
    {
     

        await OrderService.SaveOrder(order);
        NavigateToHome();
    }
    private void NavigateToHome()
    {
        NavigationManager.NavigateTo("/");
    }

    protected void Cancel()
    {
        NavigateToHome();
    }

    protected async Task AddProduct()
    {
        ArgumentNullException.ThrowIfNull(DialogService);


        var dialog = DialogService.Show<ProductDetails>("Product Details");
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            var product = (Product)result.Data;
            if (order.Products == null)
                order.Products = new List<Product>();
            order.Products.Add(product);

        }

    }

    protected async Task RemoveProduct(int productId)
    {
        order.Products.RemoveAll(p => p.Id == productId);
    }
}
