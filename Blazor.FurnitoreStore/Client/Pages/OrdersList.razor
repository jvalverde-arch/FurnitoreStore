@inject IOrderService OrderService

@if(orders!=null && orders.Any())
{
    <RadzenGrid AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
        FilterMode="FilterMode.Advanced" AllowSorting="true" AllowPaging="true" Data="@orders" 
        TItem="Order" ColumnWidth="100px" > 
        <Columns>
            <RadzenGridColumn TItem="Order" Property="OrderNumber" Title="Number"/>
            <RadzenGridColumn TItem="Order" Property="ClientName" Title="Client Name" />
            <RadzenGridColumn TItem="Order" Property="OrderDate" Title="Order Date" />
            <RadzenGridColumn TItem="Order" Property="DeliveryDate" Title="Delivery Date" />
            <RadzenGridColumn TItem="Order" Property="Total" Title="Total" />
            <RadzenGridColumn TItem="Order"  Title="Edit" >
                <Template Context="data">
                    <RadzenLink Path="@($"/orderdetails/{data.Id}")" Text="Edit"></RadzenLink>
                </Template>
            </RadzenGridColumn>
            <RadzenGridColumn TItem="Order" Title="Delete">
                <Template Context="data">
                    <RadzenLink @onclick="@(args => Delete(data.Id))" Text="Delete"></RadzenLink>
                </Template>
            </RadzenGridColumn>
           
        </Columns>
    </RadzenGrid>
}
else
{
    <p><em>Loading...</em></p>
}

@code {
    //public IEnumerable<Order> orders;
    public List<Order> orders;

    public string Mensaje { get; set; }

    protected async override Task OnInitializedAsync()
    {
        try
        {
            //orders = await OrderService.GetAll();
            orders = (List<Order>) await OrderService.GetAll();
        }
        catch (Exception e)
        {

            Mensaje = "Error..." + e.Message;
        };
    }
     protected async Task Delete(int id)
    {
        await OrderService.DeleteOrder(id);
        orders.RemoveAll(p => p.Id == id);
    }
    
    

   

   

}
